// scripts/buildAssetMap.mjs
import fs from "fs";
import path from "path";
import url from "url";

const ROOT = process.cwd();
const JSON_PATH = path.join(ROOT, "assets", "data", "data.json");
const ARGS = new Set(process.argv.slice(2));
const DRY_RUN = ARGS.has("--dry-run") && !ARGS.has("--force") ? true : !ARGS.has("--force"); // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º dry-run
const ASSETS_DIR = path.join(ROOT, "assets");
const ING_DIR = path.join(ASSETS_DIR, "ingredients");
const CKT_DIR = path.join(ASSETS_DIR, "cocktails");
const OUT_FILE = path.join(ROOT, "scripts", "assetMap.js");

const IMG_EXTS = new Set([".png", ".jpg", ".jpeg"]);

// ---------------- helpers ----------------
function isImage(file) {
  const ext = path.extname(file).toLowerCase();
  return IMG_EXTS.has(ext);
}

/**
 * –ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö —É –≤–∏–≥–ª—è–¥—ñ 'assets/...'
 * –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ photoUri (unstable_path, –ø—Ä—è–º–∏–π —à–ª—è—Ö —É assets, —Ç–æ—â–æ).
 * –Ø–∫—â–æ —à–ª—è—Ö –Ω–µ –≤–µ–¥–µ –≤ /assets, –ø–æ–≤–µ—Ä—Ç–∞—î null.
 */
function extractAssetsRelPath(photoUri) {
  if (!photoUri || typeof photoUri !== "string") return null;

  // –í–∏–ø–∞–¥–æ–∫ 1: URL –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º unstable_path=.%2Fassets%2F...
  try {
    const maybeUrl = new url.URL(photoUri);
    const up = maybeUrl.searchParams.get("unstable_path");
    if (up) {
      const decoded = decodeURIComponent(up); // —Ç–∏–ø–æ–≤–æ './assets/...'
      const cleaned = decoded.replace(/^\.?\//, ""); // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ './' –∞–±–æ '/'
      if (cleaned.startsWith("assets/")) return cleaned;
    }
  } catch (_) {
    // –Ω–µ URL ‚Äî –≤–ø–∞–¥–µ–º–æ –Ω–∏–∂—á–µ
  }

  // –í–∏–ø–∞–¥–æ–∫ 2: –≤–∂–µ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –¥–æ assets
  if (photoUri.startsWith("./assets/") || photoUri.startsWith("/assets/") || photoUri.startsWith("assets/")) {
    const cleaned = photoUri.replace(/^\.?\//, "");
    return cleaned.startsWith("assets/") ? cleaned : null;
  }

  // –¢–∏–º—á–∞—Å–æ–≤—ñ —à–ª—è—Ö–∏ (file://...) —ñ–≥–Ω–æ—Ä—É—î–º–æ
  return null;
}

/** –í–∏—Ç—è–≥—É—î –≤—Å—ñ –≤–∞–ª—ñ–¥–Ω—ñ assets-—à–ª—è—Ö–∏ –∑ photoUri –≤ –º–∞—Å–∏–≤—ñ –æ–±‚Äô—î–∫—Ç—ñ–≤ */
function collectFromArray(arr) {
  const out = new Set();
  for (const item of arr || []) {
    const rel = extractAssetsRelPath(item?.photoUri);
    if (rel) out.add(rel);
  }
  return out;
}

/** –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–±–∏—Ä–∞—î –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ø–∞–ø–∫–∏ dir, –ø–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ 'assets/...' */
function collectImagesRecursively(dir, relBase = "assets") {
  const res = new Set();
  if (!fs.existsSync(dir)) return res;

  for (const entry of fs.readdirSync(dir)) {
    const abs = path.join(dir, entry);
    const st = fs.statSync(abs);
    if (st.isDirectory()) {
      for (const p of collectImagesRecursively(abs, path.posix.join(relBase, path.basename(dir), entry))) {
        res.add(p);
      }
    } else if (st.isFile() && isImage(entry)) {
      // –í–∏—Ä–∞—Ö—É—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö 'assets/...'
      const rel = path.posix.join(
        "assets",
        path.relative(ASSETS_DIR, abs).split(path.sep).join(path.posix.sep)
      );
      res.add(rel);
    }
  }
  return res;
}

/** –ó–±–∏—Ä–∞—î –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –∫–æ—Ä–µ–Ω—è assets/ (–ª–∏—à–µ –ø–µ—Ä—à–∏–π —Ä—ñ–≤–µ–Ω—å) */
function collectFromAssetsRoot() {
  const out = new Set();
  if (!fs.existsSync(ASSETS_DIR)) return out;
  for (const file of fs.readdirSync(ASSETS_DIR)) {
    const full = path.join(ASSETS_DIR, file);
    const stat = fs.statSync(full);
    const lower = file.toLowerCase();
    if (stat.isFile() && isImage(lower)) {
      out.add(path.posix.join("assets", file));
    }
  }
  return out;
}

/** –ü–µ—Ä–µ–≤—ñ—Ä—è—î —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É; —è–∫—â–æ –Ω–µ–º–∞ ‚Äî –ª–æ–≥ warning —ñ –ø—Ä–æ–ø—É—Å–∫–∞—î */
function filterExisting(relPaths) {
  const out = [];
  for (const rel of relPaths) {
    const abs = path.join(ROOT, rel);
    if (fs.existsSync(abs)) out.push(rel);
    else console.warn(`‚ö† –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª: ${rel}`);
  }
  return out;
}

function buildMapObject(relPaths) {
  const sorted = [...relPaths].sort((a, b) => a.localeCompare(b));
  const lines = sorted.map((rel) => `  '${rel}': require('../${rel}'),`);
  const header = `/* ‚ö†Ô∏è AUTOGENERATED FILE ‚Äì do not edit by hand.
   * Generated by scripts/buildAssetMap.mjs
   * Run with:
   *   node scripts/buildAssetMap.mjs [--dry-run|--force]
   */`;
  const body = `export const ASSET_MAP = {\n${lines.join("\n")}\n};\n`;
  return `${header}\n\n${body}`;
}

function ensureDirs() {
  fs.mkdirSync(path.dirname(OUT_FILE), { recursive: true });
}

/** –í–∏–¥–∞–ª—è—î —Ñ–∞–π–ª–∏ –∑ –º–∞—Å–∏–≤—É —à–ª—è—Ö—ñ–≤ 'assets/...' (–≤—ñ–¥–Ω–æ—Å–Ω–æ –∫–æ—Ä–µ–Ω—è), –∑ –ª–æ–≥–∞–º–∏ —ñ dry-run */
function removeFiles(relPaths) {
  let removed = 0;
  for (const rel of relPaths) {
    const abs = path.join(ROOT, rel);
    if (!abs.startsWith(ASSETS_DIR)) {
      console.warn(`‚ö† –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –≤ assets): ${rel}`);
      continue;
    }
    if (DRY_RUN) {
      console.log(`DRY-RUN: –≤–∏–¥–∞–ª–∏–≤ –±–∏ ${rel}`);
    } else {
      try {
        fs.unlinkSync(abs);
        removed++;
        console.log(`üóë –í–∏–¥–∞–ª–µ–Ω–æ: ${rel}`);
      } catch (e) {
        console.warn(`‚ö† –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ ${rel}: ${e.message}`);
      }
    }
  }
  if (DRY_RUN) {
    console.log(`DRY-RUN: –≤—Å—å–æ–≥–æ —Ñ–∞–π–ª—ñ–≤ –¥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ${relPaths.length}`);
  } else {
    console.log(`‚úî –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${removed}/${relPaths.length}`);
  }
}

// ---------------- main ----------------
function main() {
  if (!fs.existsSync(JSON_PATH)) {
    console.error(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ JSON: ${JSON_PATH}`);
    process.exit(1);
  }

  const raw = fs.readFileSync(JSON_PATH, "utf8");
  let data;
  try {
    data = JSON.parse(raw);
  } catch (e) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON:", e.message);
    process.exit(1);
  }

  // 1) –ó–±–∏—Ä–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ JSON
  const referenced = new Set();
  if (Array.isArray(data.ingredients)) {
    for (const p of collectFromArray(data.ingredients)) referenced.add(p);
  }
  if (Array.isArray(data.cocktails)) {
    for (const p of collectFromArray(data.cocktails)) referenced.add(p);
  }

  // 2) –î–æ–¥–∞—î–º–æ PNG/JPG/JPEG –∑ –∫–æ—Ä–µ–Ω—è assets/ (—ñ–∫–æ–Ω–∫–∏, splash —Ç–æ—â–æ)
  for (const p of collectFromAssetsRoot()) referenced.add(p);

  // 3) –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
  const existingReferenced = new Set(filterExisting(referenced));

  // 4) –ë—É–¥—É—î–º–æ —Ç–∞ –∑–∞–ø–∏—Å—É—î–º–æ assetMap.js
  const outJs = buildMapObject(existingReferenced);
  ensureDirs();
  fs.writeFileSync(OUT_FILE, outJs, "utf8");
  console.log(`‚úî –û–Ω–æ–≤–ª–µ–Ω–æ ${path.relative(ROOT, OUT_FILE)} (${existingReferenced.size} –∑–∞–ø–∏—Å—ñ–≤)`);

  // 5) –ü–æ—à—É–∫ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —É assets/cocktails —Ç–∞ assets/ingredients
  const allInCocktails = collectImagesRecursively(CKT_DIR);
  const allInIngredients = collectImagesRecursively(ING_DIR);

  const referencedInCocktails = [...existingReferenced].filter(p => p.startsWith("assets/cocktails/"));
  const referencedInIngredients = [...existingReferenced].filter(p => p.startsWith("assets/ingredients/"));

  const unusedCocktails = [...allInCocktails].filter(p => !referencedInCocktails.includes(p));
  const unusedIngredients = [...allInIngredients].filter(p => !referencedInIngredients.includes(p));

  // 6) –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö
  if (unusedCocktails.length === 0 && unusedIngredients.length === 0) {
    console.log("‚úî –ù–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —É assets/cocktails —Ç–∞ assets/ingredients –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
  } else {
    console.log(`–ó–∞–π–≤—ñ —Ñ–∞–π–ª–∏ (–≤—Å—å–æ–≥–æ ${unusedCocktails.length + unusedIngredients.length}):`);
    for (const p of [...unusedIngredients, ...unusedCocktails]) console.log(`  - ${p}`);

    removeFiles([...unusedIngredients, ...unusedCocktails]);
  }

  if (DRY_RUN) {
    console.log("‚Ñπ –ó–∞–ø—É—Å—Ç—ñ—Ç—å –∑ --force, —â–æ–± –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
  }
}

main();
