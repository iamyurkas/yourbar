import React, {
  useEffect,
  useState,
  useCallback,
  useRef,
  useMemo,
  memo,
  useDeferredValue,
} from "react";
import {
  View,
  Text,
  Image,
  StyleSheet,
  ActivityIndicator,
  Platform,
  Pressable,
} from "react-native";
import { FlashList } from "@shopify/flash-list";
import { useNavigation, useIsFocused } from "@react-navigation/native";
import {
  getAllIngredients,
  saveIngredient,
} from "../storage/ingredientsStorage";
import HeaderWithSearch from "../components/HeaderWithSearch";
import { useTabMemory } from "../context/TabMemoryContext";
import { MaterialIcons } from "@expo/vector-icons";

// ---- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –ª—ñ—Å—Ç—É ----
const IMAGE_SIZE = 50;
const ROW_VERTICAL = 8;
const ROW_BORDER = 1;
const ITEM_HEIGHT = ROW_VERTICAL * 2 + Math.max(IMAGE_SIZE, 40) + ROW_BORDER;
const RIPPLE = { color: "#E3F2FD" };

// ---- –†—è–¥–æ–∫ —Å–ø–∏—Å–∫—É ----
const ItemRow = memo(
  function ItemRow({
    id,
    name,
    photoUri,
    tags,
    inBar,
    inShoppingList,
    baseIngredientId,
    onPress,
    onToggleInBar,
    isNavigating,
  }) {
    const isBranded = !!baseIngredientId;

    return (
      <View style={inBar ? styles.highlightWrapper : styles.normalWrapper}>
        <View
          style={[
            styles.item,
            isBranded && styles.brandedStripe,
            !inBar && styles.dimmed,
            isNavigating && styles.navigatingRow, // –º–∏—Ç—Ç—î–≤–∏–π —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —Ç–∞–ø—É
          ]}
        >
          {inShoppingList && (
            <MaterialIcons
              name="shopping-cart"
              size={16}
              color="#4DABF7"
              style={styles.cartIcon}
            />
          )}

          {/* –õ—ñ–≤–∞ –∑–æ–Ω–∞ ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª–µ–π */}
          <Pressable
            onPress={() => onPress(id)}
            android_ripple={RIPPLE}
            style={({ pressed }) => [
              styles.leftTapZone,
              pressed && styles.pressedLeft, // –º–∏—Ç—Ç—î–≤–∏–π –≤—ñ–¥–≥—É–∫
            ]}
            hitSlop={{ top: 4, bottom: 4, left: 0, right: 8 }}
          >
            {photoUri ? (
              <Image
                source={{ uri: photoUri }}
                style={styles.image}
                resizeMode="cover"
              />
            ) : (
              <View style={[styles.image, styles.placeholder]}>
                <Text style={styles.placeholderText}>No image</Text>
              </View>
            )}
            <View style={styles.info}>
              <Text numberOfLines={1} style={styles.name}>
                {name}
              </Text>
              {Array.isArray(tags) && tags.length > 0 && (
                <View style={styles.tagRow}>
                  {tags.map((tag) => (
                    <View
                      key={tag.id}
                      style={[styles.tag, { backgroundColor: tag.color }]}
                    >
                      <Text style={styles.tagText}>{tag.name}</Text>
                    </View>
                  ))}
                </View>
              )}
            </View>
          </Pressable>

          {/* –ß–µ–∫–±–æ–∫—Å ‚Äî –æ–ø—Ç–∏–º—ñ—Å—Ç–∏—á–Ω–∏–π –∞–ø–¥–µ–π—Ç + –ø—Ä–µ—Å-–µ—Ñ–µ–∫—Ç */}
          <Pressable
            onPress={() => onToggleInBar(id)}
            hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}
            android_ripple={{ ...RIPPLE, borderless: true }}
            style={({ pressed }) => [
              styles.checkButton,
              pressed && styles.pressedCheck,
            ]}
          >
            <MaterialIcons
              name={inBar ? "check-circle" : "radio-button-unchecked"}
              size={22}
              color={inBar ? "#4DABF7" : "#999"}
            />
          </Pressable>
        </View>
      </View>
    );
  },
  // üîí —Ä–µ—Ä–µ–Ω–¥–µ—Ä —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ñ–π –∑–º—ñ–Ω—ñ –≤—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–∏—Ö –ø–æ–ª—ñ–≤
  (prev, next) =>
    prev.id === next.id &&
    prev.name === next.name &&
    prev.photoUri === next.photoUri &&
    prev.inBar === next.inBar &&
    prev.inShoppingList === next.inShoppingList &&
    prev.baseIngredientId === next.baseIngredientId &&
    prev.isNavigating === next.isNavigating &&
    // shallow-–ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–∞—Å–∏–≤—É —Ç–µ–≥—ñ–≤ (–ø–æ—Å–∏–ª–∞–Ω–Ω—è), —â–æ–± –Ω–µ –¥–æ—Ä–æ–≥–æ
    prev.tags === next.tags
);

export default function AllIngredientsScreen() {
  const navigation = useNavigation();
  const isFocused = useIsFocused();
  const { setTab } = useTabMemory();

  const [ingredients, setIngredients] = useState([]);
  const [loading, setLoading] = useState(true);
  const [search, setSearch] = useState("");
  const [searchDebounced, setSearchDebounced] = useState("");
  const [navigatingId, setNavigatingId] = useState(null); // –º–∏—Ç—Ç—î–≤–∞ –ø—ñ–¥—Å–≤—ñ—Ç–∫–∞ —Ä—è–¥–∫–∞

  // ‚ö†Ô∏è —É–Ω–∏–∫–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ setTab
  const didSetTabRef = useRef(false);
  useEffect(() => {
    if (!didSetTabRef.current) {
      setTab("ingredients", "All");
      didSetTabRef.current = true;
    }
  }, [setTab]);

  // –º–∞–ø–∞ id -> index
  const indexMapRef = useRef(new Map());

  const sortIngredients = useCallback((data) => {
    // —Å–æ—Ä—Ç—É—î–º–æ 1 —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    return [...data].sort((a, b) =>
      a.name.localeCompare(b.name, "uk", { sensitivity: "base" })
    );
  }, []);

  const loadIngredients = useCallback(async () => {
    const data = await getAllIngredients();
    const sorted = sortIngredients(data);
    setIngredients(sorted);
    const map = new Map();
    for (let i = 0; i < sorted.length; i++) map.set(sorted[i].id, i);
    indexMapRef.current = map;
  }, [sortIngredients]);

  useEffect(() => {
    let cancelled = false;
    const run = async () => {
      if (cancelled) return;
      await loadIngredients();
      if (!cancelled) setLoading(false);
    };
    if (isFocused) run();
    return () => {
      cancelled = true;
    };
  }, [isFocused, loadIngredients]);

  // üîî –ª–µ–≥–∫–∏–π debounce –Ω–∞ –ø–æ—à—É–∫—É
  useEffect(() => {
    const id = setTimeout(() => setSearchDebounced(search), 300);
    return () => clearTimeout(id);
  }, [search]);

  // ‚è≥ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏–π —Ä–µ–Ω–¥–µ—Ä –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É (React 18)
  const deferredSearch = useDeferredValue(searchDebounced);

  // ‚úÖ –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π toggle –±–µ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ `ingredients`
  // + –±–∞—Ç—á–∏–Ω–≥ –∑–∞–ø–∏—Å—ñ–≤ —É —Å—Ö–æ–≤–∏—â–µ
  const pendingSaveRef = useRef(new Map()); // id -> latestValue
  const flushTimerRef = useRef(null);

  const flushSaves = useCallback(() => {
    const pending = pendingSaveRef.current;
    pendingSaveRef.current = new Map();
    flushTimerRef.current = null;

    if (pending.size === 0) return;
    // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—á–∫–æ—é, –∞–ª–µ –æ–∫—Ä–µ–º–∏–º–∏ –≤–∏–∫–ª–∏–∫–∞–º–∏ API
    pending.forEach((inBar, id) => {
      const idx = indexMapRef.current.get(id);
      if (idx == null) return;
      const current = ingredients[idx];
      // —è–∫—â–æ –∑–∞ —á–∞—Å –±–∞—Ç—á–∏–Ω–≥—É –¥–∞–Ω—ñ –æ–Ω–æ–≤–∏–ª–∏—Å—è ‚Äî –ø—ñ–¥—Å—Ç—Ä–∞—Ö—É—î–º–æ—Å—å
      if (!current) return;
      saveIngredient({ ...current, inBar }).catch((err) =>
        console.error("Save failed", err)
      );
    });
  }, [ingredients]);

  const scheduleFlush = useCallback(() => {
    if (flushTimerRef.current) return;
    flushTimerRef.current = setTimeout(flushSaves, 200);
  }, [flushSaves]);

  const toggleInBar = useCallback(
    (id) => {
      setIngredients((prev) => {
        const idx = indexMapRef.current.get(id);
        if (idx === undefined || !prev[idx]) return prev;
        const next = [...prev];
        const item = next[idx];
        const nextInBar = !item?.inBar;
        next[idx] = { ...item, inBar: nextInBar };

        // –∑–∞–ø–∏—Å —É —á–µ—Ä–≥—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        pendingSaveRef.current.set(id, nextInBar);
        scheduleFlush();

        return next;
      });
    },
    [scheduleFlush]
  );

  const onItemPress = useCallback(
    (id) => {
      setNavigatingId(id); // –º–∏—Ç—Ç—î–≤–∞ –ø—ñ–¥—Å–≤—ñ—Ç–∫–∞
      navigation.navigate("Create", {
        screen: "IngredientDetails",
        params: { id },
      });
      // –∑–∞–ø–∞—Å–Ω–∏–π —Ç–∞–π–º–µ—Ä ‚Äî –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —à–≤–∏–¥–∫–æ–≥–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
      setTimeout(() => setNavigatingId(null), 600);
    },
    [navigation]
  );

  const filtered = useMemo(() => {
    const q = deferredSearch.trim().toLowerCase();
    if (!q) return ingredients;
    return ingredients.filter((i) => i.name.toLowerCase().includes(q));
  }, [ingredients, deferredSearch]);

  const renderItem = useCallback(
    ({ item }) => (
      <ItemRow
        id={item.id}
        name={item.name}
        photoUri={item.photoUri}
        tags={item.tags}
        inBar={item.inBar === true}
        inShoppingList={item.inShoppingList === true}
        baseIngredientId={item.baseIngredientId}
        onPress={onItemPress}
        onToggleInBar={toggleInBar}
        isNavigating={navigatingId === item.id}
      />
    ),
    [onItemPress, toggleInBar, navigatingId]
  );

  const keyExtractor = useCallback(
    (item, i) => String(item?.id ?? `${item?.name ?? "item"}-${i}`),
    []
  );

  useEffect(() => {
    // –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ ‚Äî –¥–æ–∂–µ–Ω–µ–º–æ –Ω–µ–∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–∞–ø–∏—Å–∏
    return () => {
      if (flushTimerRef.current) clearTimeout(flushTimerRef.current);
      flushTimerRef.current = null;
      // —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ñ–ª–∞—à–Ω–µ–º–æ, —â–æ–± –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏
      // (—É —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–¥—ñ –º–æ–∂–Ω–∞ –ª–∏—à–∏—Ç–∏ —è–∫ —î, —è–∫—â–æ —Ü–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
      // –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø—Ä—è–º–æ —Ç—É—Ç –Ω–µ –º–æ–∂–µ–º–æ, –±–æ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ state ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≥–æ—Ä–Ω–µ–º–æ –º–∞–ø—É
      const pending = pendingSaveRef.current;
      pendingSaveRef.current = new Map();
      pending.forEach((inBar, id) => {
        const idx = indexMapRef.current.get(id);
        if (idx == null) return;
        const current = ingredients[idx];
        if (!current) return;
        saveIngredient({ ...current, inBar }).catch(() => {});
      });
    };
  }, [ingredients]);

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#4DABF7" />
        <Text style={{ marginTop: 12 }}>Loading ingredients...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <HeaderWithSearch
        searchValue={search}
        setSearchValue={setSearch}
        onMenu={() => navigation.navigate("GeneralMenu")}
        onFilter={() => console.log("Open filter")}
      />

      <FlashList
        data={filtered}
        keyExtractor={keyExtractor}
        renderItem={renderItem}
        estimatedItemSize={ITEM_HEIGHT}
        contentContainerStyle={styles.listContent}
        keyboardShouldPersistTaps="handled"
        removeClippedSubviews
        initialNumToRender={12}
        getItemType={() => "ING"} // –¥–æ–ø–æ–º–∞–≥–∞—î —Ä–µ—é–∑—É —Ç–∏–ø—ñ–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        ListEmptyComponent={
          <View style={{ padding: 24 }}>
            <Text>No ingredients found</Text>
          </View>
        }
      />
    </View>
  );
}

const styles = StyleSheet.create({
  loadingContainer: { flex: 1, justifyContent: "center", alignItems: "center" },
  container: { flex: 1, backgroundColor: "white" },
  listContent: { backgroundColor: "white" },

  highlightWrapper: {
    backgroundColor: "#E3F2FD",
    borderBottomWidth: ROW_BORDER,
    borderBottomColor: "#fff",
  },
  normalWrapper: {
    borderBottomWidth: ROW_BORDER,
    borderBottomColor: "#fff",
  },
  item: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: ROW_VERTICAL,
    paddingHorizontal: 12,
    position: "relative",
  },
  dimmed: { opacity: 0.88 },

  // –º–∏—Ç—Ç—î–≤–∞ –ø—ñ–¥—Å–≤—ñ—Ç–∫–∞ —Ä—è–¥–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
  navigatingRow: {
    opacity: 0.6,
    backgroundColor: "#F0F7FF",
  },

  leftTapZone: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    paddingRight: 8,
  },
  // —Å—Ç–∏–ª—å –ø—ñ–¥ —á–∞—Å –Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—è (Pressable)
  pressedLeft: {
    opacity: 0.7,
    transform: [{ scale: Platform.OS === "ios" ? 0.98 : 0.99 }],
  },

  image: {
    width: IMAGE_SIZE,
    height: IMAGE_SIZE,
    borderRadius: 8,
    marginRight: 12,
    backgroundColor: "#ffffff",
    overflow: "hidden",
  },
  placeholder: { justifyContent: "center", alignItems: "center" },
  placeholderText: { color: "#999", fontSize: 10, textAlign: "center" },

  info: { flex: 1, paddingRight: 8 },
  name: { fontSize: 16, fontWeight: "bold" },

  tagRow: { flexDirection: "row", flexWrap: "wrap", marginTop: 4 },
  tag: {
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 12,
    marginRight: 6,
    marginBottom: 4,
  },
  tagText: { fontSize: 10, color: "white", fontWeight: "bold" },

  cartIcon: { position: "absolute", bottom: 4, right: 36, zIndex: 1 },
  brandedStripe: {
    borderLeftWidth: 4,
    borderLeftColor: "green",
    paddingLeft: 4,
  },

  checkButton: { marginLeft: 8, paddingVertical: 6, paddingHorizontal: 4 },
  pressedCheck: { opacity: 0.7, transform: [{ scale: 0.92 }] },
});
